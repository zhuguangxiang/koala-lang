
"hello"
'hello'
100
200.2
true
false
none

var a0 int = 0
var a11 int? = 0
var b0 int | str = 0
var b1 (int | str) = 0
var b2 (int | str) = "hello"
var b3 (int | str) ? = "hello"
// var b4 (int | str?) ? = "hello"
// var b5 (100) = 100

public func print(objs ..., sep = '\'ab\tcd', end = '\n', file io.Writer = none) {}
public func __set_item__(index int, v T) { }
public func __set_item__(index int?, v T) { }
public func __set_item__(index int | str, v T) { }
public func __set_item__(index (int | str), v T) { }
public func __set_item__(index int | str, v T) { }
public func __set_item__(index (int | str), v T | K | V | Int = none) { }
class Foo : Bar[int] {
}

if a > b {

} else if a == b {

} else {

}

if let a = b {

}

if var a = b {

}

if a := b {

}

guard b else {

}

guard let a = b else {

}

guard var a = b else {

}

guard a := b else {

}

while {

}

while true {

}

while a := b {

}

while var a = b {

}

for a, b in range(1, 2, 1) {

}

for a in b {

}

if a is Foo {

}

for a in 1...2 {

}

let a = b as int
let a1 = b!
let a2 = b ?: c

switch a {
    case 100: 100
    case 200: 2,
    case 300: 2;
    case _: "hello"
    case 100,200: 100
    case in range(1,100,3), 1000: 2;
    case 1...2: ok
    case in 1...2: ok
}

let good = a[1:2:]
a.b
arr[1:2:3]
arr[1:2:]
a[1::]
a[::]
a[:]
a[int]()
a[int]()
list[int]()

/*
let NUM1 = 12345678901234567890
let NUM2 = 100
let NUM3 int8 = 200
let NUM4 int8 = 100
let NUM5 int8 = 0x200
let f1 = 1.23
let N int = 1.23
let O1 object = 100
let b = true
let s1 = "hello"
let s2 = "hi"
let s3 = "he\"l\\lo
 world"
let s4 = "æ±‰"

let b2 = false

let ms = """
{
    "key" : "value"
}
"""

let v int = none
*/

/*
if a > b {
    print("hello");
}
[1,2]
(1,)
tuple[int, int]()
{1:2}
{1, 2, 3}
list(1,2,3)
set[int]({1,2,3})
set({1,2})
dict({1: 2})
dict[str, int]()
str("hello")
int(100)
int.abc
//abc.int
range(1,23)
type()
abc(type)
if a > b { print("hello"); }
*/

/*
let v list[int] = [1,2,3]
let m dict[int, int] = {k:v}

array[int8]("hello")
bytes("hello")

type(v)
*/

/*
func new_bytes(v (int | str | list[int8])? = none) bytes {

}

func add(a (int | str)?, b (int | str)) tuple[int, str] {
    if let a1 = a {
        if a1 is int {
            if b is int {

            } else if b is str {

            }
        } else if a1 is str {

        } else {
            unreachable()
        }
    }

    guard let a1 = a else {
        return
    }

    if (a1 is int) {

    }

    arr := [1,2,3]
    t := (1,)
    map := {"hello", 100}
    bs = bytes(100)
}

func main() {

}

a := list(1,2,3)
a = [1,2,3]
a = list([1,2,3])
[v for v in range(1, 100)]

@native(builtin_print)
func print(objs: ..., sep = ' ', end = '\n', file io.Writer? = None, flush = false)

print("hello", sep = '\t')

print("hello", '\t')

a = 100
ccall say_y(a)
bs = bytes(100)
ccall snprintf(bs, 100, "hello, %s", "world")
await foo(1, 2)

*/
#
#!
