/*!
The 'builtin' module of koala standard library
Most of them in 'builtin' module are native c implementations.
This module is imported automatically.
*/

public trait Iterable[T] {
    public func __iter__() Iterator[T]
}

public trait Iterator[T] : Iterable[T] {
    public func __next__() T
}


public class object {
    @native(kl_object_new)
    public static func __new__() object

    @native(kl_object_hash)
    public func __hash__() int

    @native(kl_object_cmp)
    public func __cmp__() int

    @native(kl_object_str)
    public func __str__() str
}

public class Number {
    public func __to_int__() int
    public func __to_float__() float
    public func __to_complex__() complex
}

public final class int : Number {

    @native(kl_int_new)
    public static func __new__() int

    @native(kl_int_init)
    public func __init__(x int | str = 0, base = 10)

    @native(kl_object_hash)
    public func __hash__() ints

    @native(kl_object_cmp)
    public func __cmp__() int

    @native(kl_object_str)
    public func __str__() str

    public func __to_int__() int {
        return self;
    }

    @native(kl_int_to_float)
    public func __to_float__() float

    @native(kl_int_to_complex)
    public func __to_complex__() complex

    @intrinsic
    public func __add__(rhs Number) Number {}

    @native(kl_int_sub)
    public func __sub__(rhs Number) Number {}
}

public final class list[T] : Iterable[T] {

    public func __init__(it iterable[T]) {
        cap = DEFAULT_CAP
        len = 0
        arr = Pointer[T](cap)

        i := 0
        for v in it {
            if i < cap {
                arr[i] = v
            } else {
                cap <<= 1
                arr = arr.extend(cap)
            }
            i += 1
        }
        len = i
    }

    @runtime(kl_list_get_item)
    public func __get_item__(index int) T {}

    public func __set_item__(index int, v T) {

    }

    public func __get_slice__(index slice) list[T] { ... }

    public func __set_slice__(index slice, v iterable[T]) { ... }

    /**
    This is one getset `len` of list

    example:
    ---
    list = [1, 2, 3]
    assert_eq(list.len, 3)
    ---
    */
    @native(list_len)
    @get(len)
    public func __len__() int { ... }
}

@runtime
public func print(objs ..., sep = ' ', end = '\n', file io.Writer = none) { }

public final class int {
    @native(int_init)
    public func __init__(x int | str = 0, base = 10) { ... }
}

public final class str {

}
