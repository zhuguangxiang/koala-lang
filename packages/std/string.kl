
type uint8_ptr Pointer<uint8>

extern "C" {
    func memcpy(dst uint8_ptr, src uint8_ptr, len u32) uint8_ptr
}

public struct String : ToString & Hashable<String> {
    offset int32
    len int32
    array [int8]

    public func __init__(arr [int8]) {
        offset = 0
        len = arr.length
        array = arr
    }

    public func sub_string(offset u32, len u32) String {
        // if offset out of range, raise a panic!
        if offset > self.len {
            panic("invalid offset")
        }

        let s = String(self.array)
        s.offset = offset
        s.len = len
        return s
    }

    public func __add__(rhs String) String {
        let s = String([int8; self.len + rhs.len]);
        array_copy(s.array, 0, self.array, self.offset, self.len)
        array_copy(s.array, self.len, rhs.array, rhs.offset, rhs.len)
        return s;
    }

    public override func to_str() String {
        return self
    }

    public override func hash_code() u32 {

    }

    public override func equals(rhs String) bool {

    }
}
