
type uint8_ptr Pointer<uint8>

extern "C" {
    func memcpy(dst uint8_ptr, src uint8_ptr, len u32) uint8_ptr
}

public struct String : ToString & Hashable<String> {
    let raw RawArray
    var offset uint32
    var len uint32

    public func __init__(s Pointer<uint8>, len uint32) {
        raw = RawArray(len)
        memcpy(raw.as_ptr(), s, len);
    }

    public func sub_string(offset u32, len u32) String {
        // if offset out of range, raise a panic!
        if offset > self.len {
            panic("invalid offset")
        }

        var s = String()
        s.ptr = self.ptr
        s.offset = offset
        s.len = len
        return s
    }

    public func __add__(rhs String) String {
        let s = String()
        s.raw = raw_array_new(self.len + rhs.len);
        memcpy(s.raw.as_ptr, self.raw.as_ptr, self.len);
        let ptr = s.raw.as_ptr.offset(self.len);
        memcpy(ptr, rhs.raw.as_ptr(), rhs.len);
        return s;
    }

    public func as_ptr() Pointer<u8> {
        return raw.as_ptr()
    }

    public override func to_str() String {
        return self
    }

    public override func hash_code() u32 {

    }

    public override func equals(other String) bool {

    }
}
