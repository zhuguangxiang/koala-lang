///
/// Pointer<T> is a raw memory pointer, usually used for `FFI` with C language.
/// Like pointer in C language, Pointer<T> is unsafe, its lifecycle must be maintained by user.
///
/// The `T` type is only value types without any meta info.
/// There are primitive number types, and struct defined in extern "C" block.
/// About `String` and `Array`, use `to_ptr()` method to get the raw Pointer<T>.
/// This is directly get memory pointer in GC. This is unsafe.
///
/// How to use raw pointer, some examples are below:
///
/// ```koala
///
/// var val = Int32(100); // val = 100
/// let p = Pointer(val)
/// p.write(200); // val = 200
/// println(typeof(p)); // Pointer<Int32>
///
/// let p2 = p as Pointer<Int8>
/// p2[0] = 1
/// p2[1] = 2
/// p2[2] = 3
/// p2[3] = 4
///
/// extern "C" {
///
/// struct Foo {
///     str Pointer<Int8>
///     len Int32
/// }
/*
    func malloc(size u32) Pointer<Any>
    func free(ptr Pointer<u8>)
    func do_something(foo Pointer<Foo>)

    func call_back(s Pointer<u8>) Pointer<Foo> {
        foo := Foo()
        foo.str = s
        foo.len = s.length()
        p := malloc(sizeof(Foo)) as Pointer<Foo>
        p.write(foo)
        return p
    }
*/
///
/// }
///
/*
p := malloc(size_of(Foo)) as Pointer<Foo>

p.str = "hello".as_ptr()
p.len = 5
foo := p.get()
p.set(foo)

do_something(p)

free(p)

*/

@intrinsic
public struct Pointer<T> {

    ///
    /// `__init__` takes the same type with struct `Pointer<T>`,
    /// so it can omit the type parameter when new Pointer object.
    ///
    /// ```koala
    /// var val = 100
    /// var p = Pointer<Int>(val)
    /// var p2 = Pointer(val)
    /// ```
    ///
    @intrinsic
    public func __init__(v T)

    ///
    /// `offset` returns a new Pointer object. It's used in array type.
    /// > NOTE: This is unsafe function, and it maybe out of range of an array.
    ///
    @intrinsic
    public func offset(off Int32) Pointer<T>

    @intrinsic
    public func read() T

    @intrinsic
    public func write(v T)

    @intrinsic
    public func __get_item__(off Int32) T

    @intrinsic
    public func __set_item__(off Int32, val T)

    @intrinsic
    @indirectly
    public func __get_field__<V>(off Int32) V

    @intrinsic
    @indirectly
    public func __set_field__<V>(off Int32, val V)

    @intrinsic
    public func isNull() Bool
}
